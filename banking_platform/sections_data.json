{
  "architecture": {
    "overview": "A modern, Vite-based React 18 + TypeScript single-page application organized by clear domain layers: core kernel (contracts, events, DI), design system & theme, shared UI primitives, providers & services, features/pages and app entry. The app uses React Router for navigation, React Query for remote data and cache, Zustand for ephemeral client state, and a small DI/events surface for extensibility. Design tokens and a ThemeProvider centralize visual styles; components are atomic, accessible, and composable. Animations use Framer Motion presets for consistent micro-interactions.",
    "patterns": [
      "Container/Presentational separation: pages & feature containers orchestrate data while presentational components focus on rendering",
      "Atomic Design for UI components (atoms \u2192 molecules \u2192 organisms \u2192 pages)",
      "Domain-driven folders for features (features/*) and shared UI (shared/*)",
      "Provider composition pattern (AuthProvider, ThemeProvider, QueryProvider, ToastProvider, ModalProvider)",
      "React Query for server state + caching; Zustand for small local UI state",
      "Event-bus and DI for extension points (core/events.ts, core/di.ts)"
    ],
    "data_flow": "Data requests are performed through src/services/api.ts (React Query fetchers). React Query centralizes caching, invalidation and background refetching. Auth data is persisted in localStorage (via useLocalStorage) and small client-only UI state (sidebar collapsed, modals open) lives in Zustand (src/state/store.ts). Components use hooks (src/hooks/*) to access services or invoke events via the event bus (src/core/events.ts). Providers wrap the app in src/main.tsx to expose context and libraries.",
    "folder_structure": "src/\n  app/\n    config.ts\n  core/\n    contracts.ts\n    events.ts\n    hooks.ts\n    di.ts\n    utils.ts\n  theme/\n    index.ts\n    animations.ts\n  styles/\n    global.css\n  main.tsx\n  App.tsx\n  routes.tsx\n  providers/\n    ThemeProvider.tsx\n    QueryProvider.tsx\n    AuthProvider.tsx\n    ToastProvider.tsx\n    ModalProvider.tsx\n  services/\n    api.ts\n    auth.ts\n    analytics.ts\n  state/\n    store.ts\n  shared/\n    layouts/\n      MainLayout.tsx\n      AuthLayout.tsx\n    components/\n      Button.tsx\n      Icon.tsx\n      Input.tsx\n      Card.tsx\n      GlassCard.tsx\n      GradientBadge.tsx\n      Avatar.tsx\n      Tooltip.tsx\n      Dropdown.tsx\n      Modal.tsx\n      Toast.tsx\n      Skeleton.tsx\n      Spinner.tsx\n      Header.tsx\n      Sidebar.tsx\n      Footer.tsx\n      Chart.tsx\n    icons/\n      index.tsx\n  hooks/\n    useAuth.ts\n    useFetch.ts\n    useLocalStorage.ts\n    useWindowSize.ts\n    useDebounce.ts\n    useToast.ts\n    useModal.ts\n    useTheme.ts\n  pages/\n    HomePage.tsx\n    DashboardPage.tsx\n    LoginPage.tsx\n  features/\n    profile/\n      ProfileCard.tsx\n    dashboard/\n      MetricCard.tsx\n      ActivityFeed.tsx",
    "tech_stack": [
      "React 18+ (concurrent-ready patterns)",
      "TypeScript",
      "Vite (import.meta.env)",
      "React Router v6",
      "React Query (TanStack Query)",
      "Zustand for lightweight client state",
      "Framer Motion for animations",
      "Recharts or Chart.js wrapper for data viz (Chart.tsx)",
      "Tailwind utility classes optional but not required (styles/global.css provided)",
      "Accessibility best practices (ARIA, keyboard focus management)"
    ]
  },
  "kernel_specs": {
    "overview": "The Core Kernel provides a small, well-typed foundation shared by every part of the app: a single source of truth for domain contracts (types), a materialized runtime config (import.meta.env), a typed event bus, a hook registry for extension points, a compact dependency-injection container (tokens + container), and a set of common utilities. All features, providers and UI components should import from these kernel files (e.g. import { User } from '@/core/contracts'), use the event bus for cross-cutting notifications and analytics, register extension hooks when needed, and resolve cross-cutting services through the DI container for testability."
  },
  "sections": [
    {
      "id": "app-config",
      "file_path": "src/app/config.ts",
      "description": "Materialized runtime configuration using import.meta.env; exposes typed config values (API base URL, feature flags, analytics key).",
      "dependencies": [],
      "exports": [
        "AppConfig",
        "config"
      ],
      "priority": 1,
      "purpose": "Materialized runtime configuration using import.meta.env; exposes typed config values (API base URL, feature flags, analytics key). Also computes environment flags and optionally supplies mock data for development.",
      "content": "AppConfig interface\n- env: 'development' | 'staging' | 'production'\n- apiBaseUrl: string\n- socketUrl?: string\n- appName: string\n- analytics: { enabled: boolean; key?: string }\n- features: Record<string, boolean> (dynamic map keyed by feature name)\n- sso: { enabled: boolean; provider?: 'okta' | 'auth0' | 'oidc' }\n- development_mode: { enable_mock_data: boolean; verbose_logs: boolean }\n- defaults: { perPage: number }\n\nMaterialization and computed flags (implementation guidance)\n- Read values from import.meta.env. Example vars expected: VITE_API_BASE, VITE_SOCKET_URL, VITE_APP_NAME, VITE_ENV, VITE_FEATURES (comma separated, e.g. 'auth,analytics,websocket'), VITE_ANALYTICS_KEY, VITE_ENABLE_MOCKS (\"true\"|\"false\"), VITE_VERBOSE_LOGS\n- Provide parsing helpers for boolean and list.\n- Build features map: config.features = { auth: true, analytics: false, websocket: true, ... }\n- Computed flags: isDevelopment = config.env === 'development'; shouldUseMockData = isDevelopment && config.development_mode.enable_mock_data\n\nMock data\n- If shouldUseMockData is true, export a small set of mock objects used across the app: MOCK_USER_ADMIN (User), MOCK_PATIENTS array (Patient[]), MOCK_DOCTORS array. Keep the mock shapes typing-compliant with core/contracts.ts.\n\nExamples of how to use\n- const { apiBaseUrl } = config\n- if (config.features['analytics']) initAnalytics(config.analytics.key)\n- if (config.shouldUseMockData) seedLocalStoreWithMocks()\n\nImportant: Use import.meta.env (Vite) instead of process.env in all reads. Example\n- const rawEnv = import.meta.env\n- const apiBaseUrl = String(rawEnv.VITE_API_BASE ?? window.location.origin + '/api')\n\nIntegration points\n- services/api.ts uses config.apiBaseUrl and config.shouldUseMockData\n- services/analytics.ts uses config.analytics\n- providers/QueryProvider.tsx reads config.defaults.perPage when setting defaultQueryFn or pagination helpers\n\nPattern and conventions\n- Keep config immutable at runtime. Export a single const config: AppConfig.\n- Validate critical values with runtime checks in development (throw or log descriptive errors if required env missing)."
    },
    {
      "id": "app-root",
      "file_path": "src/App.tsx",
      "description": "Root app component. Composes Router (routes.tsx) and top-level layout & error boundary. Provides global keyboard listeners for accessibility (e.g., ESC to close modals).",
      "dependencies": [
        "src/routes.tsx",
        "src/providers/ToastProvider.tsx",
        "src/core/events.ts"
      ],
      "exports": [
        "App"
      ],
      "priority": 1
    },
    {
      "id": "core-contracts",
      "file_path": "src/core/contracts.ts",
      "description": "Domain types, API request/response contracts and shared TypeScript interfaces used across the app (e.g., User, AuthTokens, ApiError, DashboardMetric). Central source of truth for types.",
      "dependencies": [],
      "exports": [
        "User",
        "AuthTokens",
        "ApiError",
        "DashboardMetric",
        "Paginated<T>",
        "RouteMeta"
      ],
      "priority": 1,
      "purpose": "Domain types, API request/response contracts and shared TypeScript interfaces used across the app (users, healthcare models, API result shapes, UI helpers). This file is the canonical type source for services, components and providers.",
      "content": "Types & interfaces to define\n- Role union: 'admin' | 'doctor' | 'nurse' | 'patient' | 'staff'\n- User base interface: id, email, name, avatarUrl?, roles: Role[], createdAt, updatedAt\n- Patient: extends User with patientId, dob?, primaryPhysicianId?, demographics (address, phone)\n- Doctor: extends User with licenseNumber, specialty[], clinicIds[]\n- Nurse: extends User with licenseNumber, assignedUnit?\n\nHealthcare domain models\n- Appointment: id, patientId, providerId, startAt (ISO), endAt (ISO) | null, status: 'scheduled'|'checked_in'|'completed'|'cancelled', reason?, location?, metadata?: Record<string, unknown>\n- MedicalRecord: id, patientId, createdById, createdAt, type: 'note'|'diagnosis'|'imaging'|'lab', payload: Record<string, any>, tags?: string[]\n- Prescription: id, patientId, prescriberId, medication: { name:string; dosage:string; frequency:string }, instructions?: string, startAt?: string, endAt?: string, refills?: number\n- LabResult: id, patientId, testName, resultValue: string | number, unit?: string, referenceRange?: string, collectedAt?: string, reportedAt?: string, status: 'pending'|'final'|'amended'\n\nAPI & pagination shapes\n- ApiResult<T>: { success: boolean; data?: T; error?: ApiError }\n- ApiError: { code?: string; status?: number; message: string; details?: Record<string, any> }\n- PaginatedResponse<T>: { items: T[]; page: number; perPage: number; total: number }\n\nWebSocket event types (if websocket.enabled)\n- WsEvent generic discriminated union: 'appointment.updated' | 'appointment.created' | 'lab.result' | 'message' | 'system.notify' etc.\n- WsPayload<T> generic mapping from WsEvent to concrete payload types, e.g., appointment.updated => Appointment\n\nCommon UI types\n- LoadingState = 'idle' | 'loading' | 'success' | 'error'\n- FormState<T> = { values: T; touched: Partial<Record<keyof T, boolean>>; errors: Partial<Record<keyof T, string>> }\n- RouteMeta = { title?: string; requiresAuth?: boolean; rolesAllowed?: Role[]; layout?: 'main'|'auth' }\n\nPatterns and conventions\n- Keep domain models normalized: reference other entities by id instead of embedding large nested objects in API returns (services may provide include params to expand in fetchers).\n- Use ISO 8601 strings for dates across all models. Convert to Date objects in UI helper layers if required.\n- When adding new roles or WsEvent variants, extend the unions here so TypeScript will protect call sites across the app.\n\nExample usage\n- Component typing: import { User, Appointment } from '@/core/contracts'\n- API response: const resp: ApiResult<PaginatedResponse<Appointment>> = await apiClient.get('/appointments?page=1')\n- Hook: runHook('afterApiResponse', { url, method, response }) where response typed as ApiResult<any>\n\nIntegration points\n- services/auth.ts and services/api.ts import and use User/Auth tokens defined here.\n- state/store.ts references Role and RouteMeta.\n- WebSocket service maps incoming event.type to WsEvent and uses WsPayload typed mapping."
    },
    {
      "id": "core-di",
      "file_path": "src/core/di.ts",
      "description": "Simple dependency-injection container for substituting services during tests or extensions (getService/setService patterns).",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "registerService",
        "resolveService",
        "DIContainer"
      ],
      "priority": 1,
      "purpose": "A minimal, type-safe dependency injection container used to register and resolve cross-cutting services (api client, auth service, storage). The container supports token creation so callers can declare dependencies in a typed way and swap implementations in tests or plugin registration.",
      "content": "Token definition & typing\n- Export a generic Token<T> type implemented as a unique Symbol plus a friendly description: interface Token<T> { readonly __name: string; readonly __id: symbol }\n- Helper createToken<T>(name: string): Token<T>\n\nContainer API\n- class DIContainer {\n    private registry = new Map<symbol, any>()\n    register<T>(token: Token<T>, implementation: T): void\n    has<T>(token: Token<T>): boolean\n    resolve<T>(token: Token<T>): T\n    clear(): void // test helper\n  }\n- register overwrites previous implementations by default (document this behaviour). Use re-register pattern in tests.\n- resolve throws a descriptive error in development mode if token missing (helps debugging), but in production throws as well to avoid undefined service usage.\n\nPredefined tokens\n- export const TOKENS = {\n    ApiClient: createToken<ApiClientShape>('ApiClient'),\n    AuthService: createToken<AuthServiceShape>('AuthService'),\n    StorageService: createToken<StorageServiceShape>('StorageService'),\n    WebSocketService: createToken<WebSocketServiceShape>('WebSocketService')\n  }\n\nService shape examples (interfaces)\n- ApiClientShape: { get<T>(url:string, opts?:any): Promise<import('@/core/contracts').ApiResult<T>>; post<T>(url:string, body?:any, opts?:any): Promise<ApiResult<T>>; put; delete }\n- AuthServiceShape: { login(credentials:any): Promise<{ user: User; tokens: any }>; logout(): Promise<void>; refresh(): Promise<any>; getCurrentUser(): Promise<User | null> }\n- StorageServiceShape: { get<T>(key:string): T | null; set<T>(key:string, value:T): void; remove(key:string): void }\n- WebSocketServiceShape: { connect(): Promise<void>; disconnect(): Promise<void>; send(event:string, payload:any): void; on<K extends string>(event:K, handler:(payload:any)=>void): ()=>void }\n\nSingleton container\n- Export a default global container instance: DIContainer.instance (or named container) for app-level registrations.\n- Export helper functions registerService(token, impl) and resolveService(token) that forward to the default container for convenience.\n\nIntegration patterns\n- Providers (QueryProvider, AuthProvider) register their concrete service instances into the container during app initialization.\n- Tests can create a fresh DIContainer, register mock services and pass to modules that accept container override (or use registerService to replace in global container), enabling easy mocking of network & auth flows.\n\nUsage example\n- import { TOKENS, registerService, resolveService } from '@/core/di'\n- registerService(TOKENS.ApiClient, apiClientImpl)\n- const api = resolveService(TOKENS.ApiClient)\n\nConventions\n- Keep tokens and service interfaces here. Concrete implementations live in services/ and register themselves at bootstrap.\n- Avoid tight coupling: components/hooks should prefer consuming helper hooks (e.g., useAuth) but libraries and tests can resolve tokens directly when needed."
    },
    {
      "id": "core-events",
      "file_path": "src/core/events.ts",
      "description": "Lightweight event bus for app-level events (toasts, analytics events, auth changes). Exposes subscribe/publish helpers and typed event names.",
      "dependencies": [],
      "exports": [
        "EventBus",
        "publishEvent",
        "subscribeEvent",
        "unsubscribeEvent",
        "AppEvents"
      ],
      "priority": 1,
      "purpose": "Lightweight typed event bus for app-level events (toasts, analytics events, auth changes). Allows decoupled publish/subscribe for providers and features. Supports synchronous and asynchronous handlers and handler lifetime management.",
      "content": "Typed event map to define\n- AppEvents mapping type (eventName => payload). Provide the most common events used by app modules:\n  - 'toast:show' => { id?: string; type: 'success'|'error'|'info'|'warning'; title?: string; message: string; autoDismiss?: number }\n  - 'auth:login' => { user: import('@/core/contracts').User; tokens?: { access: string; refresh?: string } }\n  - 'auth:logout' => { reason?: string }\n  - 'api:request' => { url: string; method: 'GET'|'POST'|'PUT'|'DELETE'|'PATCH'; payload?: any }\n  - 'api:response' => { url: string; method: string; response: import('@/core/contracts').ApiResult<any> }\n  - 'analytics:event' => { name: string; payload?: Record<string, any> }\n  - 'route:change' => { from?: string; to: string }\n  - 'modal:open' => { id: string; props?: any }\n  - 'modal:close' => { id?: string }\n\nEventBus class\n- Generic typed class EventBus<E extends Record<string, any>> with methods:\n  - on<K extends keyof E>(event: K, handler: (payload: E[K]) => void | Promise<void>): () => void  // returns unsubscribe\n  - off<K extends keyof E>(event: K, handler: (payload: E[K]) => void | Promise<void>): void\n  - once<K extends keyof E>(event: K, handler: (payload: E[K]) => void | Promise<void>): void\n  - emit<K extends keyof E>(event: K, payload: E[K]): Promise<void> // awaitable; runs all handlers and resolves when done\n  - listeners<K extends keyof E>(event: K): Array<(payload: E[K]) => void | Promise<void>>\n- Implementation details:\n  - Internally store a Map<string, Set<Function>>\n  - For emit, copy handlers into an array before invoking (safe for handlers that remove themselves)\n  - Support both sync and async handlers; emit returns Promise<void> and waits for all handlers to complete (Promise.allSettled) and logs errors but does not throw to callers unless in development configured to escalate\n  - Provide lightweight once() wrapper (register that removes itself on first call)\n\nSingleton & helpers\n- Export a singleton defaultBus: EventBus<AppEvents>\n- Convenience wrappers: publishEvent<K extends keyof AppEvents>(event: K, payload: AppEvents[K]) => defaultBus.emit(event, payload)\n- subscribeEvent<K extends keyof AppEvents>(event: K, handler: (payload: AppEvents[K]) => void | Promise<void>) => defaultBus.on(event, handler)\n- unsubscribeEvent<K extends keyof AppEvents>(event: K, handler: (payload: AppEvents[K]) => void | Promise<void>) => defaultBus.off(event, handler)\n\nUsage patterns\n- ToastProvider subscribes to 'toast:show' to push UI toasts.\n- services/analytics.ts subscribes to 'route:change' and 'analytics:event' to forward events to external provider when enabled.\n- AuthProvider emits 'auth:login' and 'auth:logout' so other modules can react.\n\nIntegration points\n- core/hooks.ts may call publishEvent('api:request', {...}) before running hooks\n- services/api.ts should publish api:request/api:response events through this bus\n\nError handling and instrumentation\n- In development, EventBus logs handlers that throw or reject; errors are collected and reported to analytics if configured.\n- Keep implementation side-effect free except for calling handlers; do not store domain state here.\n\nExample use\n- import { publishEvent, subscribeEvent } from '@/core/events'\n- const unsub = subscribeEvent('route:change', payload => { publishEvent('analytics:event', { name: 'route_change', payload }) })\n- publishEvent('toast:show', { type: 'success', message: 'Saved' })"
    },
    {
      "id": "core-hooks-registry",
      "file_path": "src/core/hooks.ts",
      "description": "Registry for optional extension hooks. Small helper for registering and retrieving lifecycle hooks for plugins/extensions.",
      "dependencies": [
        "src/core/events.ts"
      ],
      "exports": [
        "registerHook",
        "runHook",
        "HookRegistry"
      ],
      "priority": 1,
      "purpose": "A small registry for pluggable lifecycle hooks used by the app and optional extensions. Allows registering multiple handlers for common hook points (beforeApiRequest, afterApiResponse, onLogin, onLogout, onRouteChange). Hooks provide typed contexts and can be run serially or in parallel.",
      "content": "HookPoint union & HookContext\n- HookPoint = 'beforeApiRequest' | 'afterApiResponse' | 'onLogin' | 'onLogout' | 'onRouteChange'\n\nContext shapes\n- BeforeApiRequestCtx = { url: string; method: string; headers: Record<string,string>; body?: any; meta?: Record<string, any> }\n- AfterApiResponseCtx = { url: string; method: string; response: import('@/core/contracts').ApiResult<any>; meta?: Record<string, any> }\n- AuthHookCtx = { user?: import('@/core/contracts').User; tokens?: any }\n- RouteChangeCtx = { from?: string; to: string }\n- HookResult generic: { handled?: boolean; data?: any }\n\nHook function type\n- type HookFunc<Ctx> = (ctx: Ctx) => void | Promise<void | HookResult>\n\nHookRegistry class responsibilities\n- register<K extends HookPoint>(name: K, fn: HookFunc<...>): () => void  // returns unregister function\n- run<K extends HookPoint>(name: K, ctx: CorrespondingCtx, options?: { parallel?: boolean; stopOnHandled?: boolean }): Promise<HookResult[]>\n- getHandlers<K extends HookPoint>(name: K): HookFunc[]\n\nImplementation notes\n- Maintain a Map<HookPoint, Set<Function>>\n- register returns an unregister function for easy plugin cleanup\n- run supports two modes:\n  - parallel (default false): handlers are run serially in registration order. If stopOnHandled true and a handler returns { handled: true }, stop further handlers.\n  - when parallel is true: use Promise.allSettled to run concurrently; stopOnHandled has no effect in parallel mode.\n- run returns all HookResults for instrumentation and debugging.\n\nStandard hooks to provide out of box\n- 'beforeApiRequest' (called by services/api.ts) allows hooks to mutate headers or augment meta. Should receive a mutable ctx.headers object; return values ignored except HookResult.handled for short-circuiting requests.\n- 'afterApiResponse' (called after API completes) allows logging, error transformation, telemetry, or domain-specific handling of non-2xx responses.\n- 'onLogin' and 'onLogout' used by AuthProvider to allow cross-cutting initialization/teardown (e.g., analytics identify, websocket auth)\n- 'onRouteChange' called by Router wrapper to let plugins respond to navigation events.\n\nIntegration with EventBus\n- Hooks may dispatch events to the event bus (import '@/core/events') if they need to inform other systems. The registry itself is lightweight and intentionally unrelated to bus internals.\n\nUsage example\n- import { registerHook, runHook } from '@/core/hooks'\n- const unregister = registerHook('onLogin', async ctx => { await analytics.identify(ctx.user) })\n- await runHook('beforeApiRequest', { url, method, headers, body })\n\nGuidelines\n- Hooks are for cross-cutting extension points only \u2014 do not store app state inside hook registry.\n- Keep handlers idempotent; register only during provider/plugin init and unregister on cleanup."
    },
    {
      "id": "core-utils",
      "file_path": "src/core/utils.ts",
      "description": "Common utilities used across app: fetch wrapper, classNames helper, date formatters, safe JSON parse, sleep, identity helpers.",
      "dependencies": [
        "src/core/contracts.ts"
      ],
      "exports": [
        "fetcher",
        "classNames",
        "formatDate",
        "safeJSONParse",
        "sleep"
      ],
      "priority": 1,
      "purpose": "Small library of safe, well-typed utility helpers used widely across the app: fetch wrapper adapters, formatting utilities, safe JSON helpers, small encryption helper (optional), classNames utility and debug logging. This file keeps simple helpers centralized to avoid duplication.",
      "content": "Utilities & function signatures\n- fetcher<T>(input: RequestInfo | string, init?: RequestInit): Promise<import('@/core/contracts').ApiResult<T>>\n  - Should rely on config.apiBaseUrl when provided (import config from '@/app/config')\n  - Automatically parse JSON and normalize errors into ApiError shape from contracts.ts\n  - Attach default headers (Accept: application/json)\n  - Support injecting Authorization header via an optional getToken callback in options\n  - Return ApiResult<T> { success: boolean; data?: T; error?: ApiError }\n  - Example: const resp = await fetcher<User>('/me', { headers: { 'X-Tenant': 'foo' } })\n\n- classNames(...items: Array<string | Record<string, boolean> | undefined | null>): string\n  - Small helper to join class names conditionally. Common signature used across components.\n\n- formatDate(dateOrIso: string | Date, opts?: { dateOnly?: boolean; locale?: string; timeZone?: string }): string\n  - Friendly wrapper around Intl.DateTimeFormat with a sensible default format and safe fallback when Intl not available. Use to format appointment times and display dates across UI.\n\n- safeJSONParse<T>(raw: string | null | undefined, fallback?: T): T | undefined\n  - Try/Catch JSON.parse and return fallback on error; used when reading localStorage or unknown server payloads.\n\n- sleep(ms: number): Promise<void>\n  - Simple delay helper for tests or UI micro-interactions.\n\n- debug(namespace: string): (...args:any[]) => void\n  - Conditional debug logger that respects config.development_mode.verbose_logs and optionally a DEBUG import.meta.env flag.\n  - Implementation example: const log = debug('services:api'); log('request', url)\n\nSmall crypto helper for local storage (optional)\n- simpleBase64Encode/Decode(value: string): string\n- encryptLocal(value: string): string // wrapper around btoa with JSON structure so we can switch to real encryption in future\n- decryptLocal(value: string): string\n\nImplementation notes\n- Keep no direct side effects (no storage writes) in utility functions unless named explicitly.\n- fetcher should be resilient: if response has non-JSON body, still return ApiError with status & text.\n- fetcher must call runHook('beforeApiRequest', ctx) and runHook('afterApiResponse', ctx) from '@/core/hooks' to enable plugins and middleware to observe API calls.\n\nIntegration points\n- services/api.ts will wrap fetcher and provide higher-level helper methods get/post/put/delete.\n- hooks/useLocalStorage uses safeJSONParse, encryptLocal and decryptLocal optionally.\n- debug used across modules to enable verbose logging in development.\n\nExample usage\n- import { fetcher, classNames, formatDate, safeJSONParse } from '@/core/utils'\n- const { success, data } = await fetcher<MyType>('/some-endpoint')\n- <div className={classNames('p-2', { 'opacity-50': isDisabled })}>...</div>"
    },
    {
      "id": "main-entry",
      "file_path": "src/main.tsx",
      "description": "Application entry point. Bootstraps providers (QueryProvider, ThemeProvider, AuthProvider, ToastProvider, ModalProvider) and renders the root App into the DOM. Reads import.meta.env via app/config.",
      "dependencies": [
        "src/App.tsx",
        "src/app/config.ts",
        "src/providers/QueryProvider.tsx",
        "src/providers/ThemeProvider.tsx",
        "src/providers/AuthProvider.tsx",
        "src/providers/ToastProvider.tsx",
        "src/providers/ModalProvider.tsx",
        "src/styles/global.css"
      ],
      "exports": [
        "bootstrap (default app bootstrap side-effect)"
      ],
      "priority": 1
    },
    {
      "id": "providers-auth",
      "file_path": "src/providers/AuthProvider.tsx",
      "description": "Authentication context. Manages current user session, token refresh, and exposes useAuth hook. Persists tokens securely (localStorage with simple encryption helper in core/utils if needed).",
      "dependencies": [
        "src/services/auth.ts",
        "src/hooks/useLocalStorage.ts",
        "src/core/events.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "AuthProvider",
        "useAuth"
      ],
      "priority": 1
    },
    {
      "id": "providers-modal",
      "file_path": "src/providers/ModalProvider.tsx",
      "description": "Global modal portal and manager that supports stacking, backdrop blur (glass morphism), focus trap, and ESC to close. Exposes openModal/closeModal via useModal hook.",
      "dependencies": [
        "src/shared/components/Modal.tsx",
        "src/theme/animations.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "ModalProvider",
        "useModal"
      ],
      "priority": 1
    },
    {
      "id": "providers-query",
      "file_path": "src/providers/QueryProvider.tsx",
      "description": "TanStack Query (React Query) provider wrapper: creates QueryClient, sets default options, and exposes devtools integration when enabled.",
      "dependencies": [
        "src/app/config.ts"
      ],
      "exports": [
        "QueryProvider"
      ],
      "priority": 1
    },
    {
      "id": "providers-theme",
      "file_path": "src/providers/ThemeProvider.tsx",
      "description": "Context-based ThemeProvider that injects CSS variables, provides a useTheme hook, persists dark/light mode in localStorage, and integrates with Framer Motion's reduced-motion preference.",
      "dependencies": [
        "src/theme/index.ts",
        "src/hooks/useLocalStorage.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "ThemeProvider",
        "useTheme"
      ],
      "priority": 1
    },
    {
      "id": "providers-toast",
      "file_path": "src/providers/ToastProvider.tsx",
      "description": "Global toast provider that renders toasts with enter/exit animations, stacking, auto-dismiss and programmatic API (useToast). Uses event bus to allow publishEvent('toast').",
      "dependencies": [
        "src/shared/components/Toast.tsx",
        "src/theme/animations.ts",
        "src/core/events.ts",
        "src/hooks/useLocalStorage.ts"
      ],
      "exports": [
        "ToastProvider",
        "useToast"
      ],
      "priority": 1
    },
    {
      "id": "routes",
      "file_path": "src/routes.tsx",
      "description": "React Router v6 route declarations. Maps routes to pages and applies layout wrappers and route-level meta (auth required).",
      "dependencies": [
        "src/pages/HomePage.tsx",
        "src/pages/DashboardPage.tsx",
        "src/pages/LoginPage.tsx",
        "src/shared/layouts/MainLayout.tsx",
        "src/shared/layouts/AuthLayout.tsx",
        "src/core/contracts.ts"
      ],
      "exports": [
        "AppRoutes"
      ],
      "priority": 1
    },
    {
      "id": "services-analytics",
      "file_path": "src/services/analytics.ts",
      "description": "Analytics wrapper that sends events to external provider if enabled. Integrates with event bus to automatically capture route changes and key events.",
      "dependencies": [
        "src/app/config.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "trackEvent",
        "initAnalytics"
      ],
      "priority": 1
    },
    {
      "id": "services-api",
      "file_path": "src/services/api.ts",
      "description": "Central API client wrapper (fetch wrapper) that handles base URL, auth token injection, error parsing and retries. Small wrapper used by React Query fetchers.",
      "dependencies": [
        "src/app/config.ts",
        "src/core/utils.ts",
        "src/core/contracts.ts",
        "src/services/auth.ts"
      ],
      "exports": [
        "apiClient",
        "get",
        "post",
        "put",
        "del"
      ],
      "priority": 1
    },
    {
      "id": "services-auth",
      "file_path": "src/services/auth.ts",
      "description": "High-level auth service: login, logout, refresh, getCurrentUser. Uses apiClient for requests and exposes typed responses matching core/contracts.",
      "dependencies": [
        "src/services/api.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "login",
        "logout",
        "getCurrentUser",
        "refreshToken"
      ],
      "priority": 1
    },
    {
      "id": "state-store",
      "file_path": "src/state/store.ts",
      "description": "Zustand store used for non-server, non-persistent UI state (sidebar collapsed, mobile nav open, last active tab). Exposes typed hooks to read/update store.",
      "dependencies": [
        "src/core/contracts.ts",
        "src/hooks/useLocalStorage.ts"
      ],
      "exports": [
        "useAppStore",
        "createAppStore"
      ],
      "priority": 1
    },
    {
      "id": "styles-global",
      "file_path": "src/styles/global.css",
      "description": "Global CSS reset, base typographic scale, CSS variables mapped from tokens (for non-JS components), base utility classes. Includes backdrop-filter for modal blur and glassmorphism helpers.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "globalStyles (CSS file imported for side-effects)"
      ],
      "priority": 1
    },
    {
      "id": "theme-animations",
      "file_path": "src/theme/animations.ts",
      "description": "Animation presets for Framer Motion and CSS transition utilities (e.g., subtle, pop, fade, stagger).",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "motionPresets",
        "transitionPresets"
      ],
      "priority": 1
    },
    {
      "id": "theme-index",
      "file_path": "src/theme/index.ts",
      "description": "Design tokens (colors, spacing, typography scale, radii, z-index), utility helpers to consume tokens in components, and a theme object shape for ThemeProvider.",
      "dependencies": [],
      "exports": [
        "theme",
        "tokens",
        "Theme",
        "useThemeTokens"
      ],
      "priority": 1
    },
    {
      "id": "component-avatar",
      "file_path": "src/shared/components/Avatar.tsx",
      "description": "Avatar component with fallback initials and optional status indicator. Accessible and keyboard-targetable.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "Avatar"
      ],
      "priority": 2
    },
    {
      "id": "component-button",
      "file_path": "src/shared/components/Button.tsx",
      "description": "Accessible Button component supporting variants (primary, ghost, outline), size props, loading state (shows spinner), and icon support. Uses theme tokens for consistent visuals.",
      "dependencies": [
        "src/shared/components/Icon.tsx",
        "src/shared/components/Spinner.tsx",
        "src/theme/index.ts",
        "src/core/utils.ts"
      ],
      "exports": [
        "Button",
        "ButtonProps"
      ],
      "priority": 2
    },
    {
      "id": "component-card",
      "file_path": "src/shared/components/Card.tsx",
      "description": "Base Card component with elevation, rounded corners and support for header/footer slots. Used by many features.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "Card",
        "CardHeader",
        "CardBody",
        "CardFooter"
      ],
      "priority": 2
    },
    {
      "id": "component-chart",
      "file_path": "src/shared/components/Chart.tsx",
      "description": "Small wrapper around a charting library (Recharts/Chart.js). Provides consistent theming, skeleton state and responsive resizing.",
      "dependencies": [
        "src/shared/components/Skeleton.tsx",
        "src/hooks/useWindowSize.ts",
        "src/theme/index.ts"
      ],
      "exports": [
        "Chart",
        "ChartProps"
      ],
      "priority": 2
    },
    {
      "id": "component-dropdown",
      "file_path": "src/shared/components/Dropdown.tsx",
      "description": "Dropdown menu with keyboard navigation, focus trap for nested menus, and animation utilties.",
      "dependencies": [
        "src/shared/components/Tooltip.tsx",
        "src/theme/animations.ts"
      ],
      "exports": [
        "Dropdown",
        "DropdownItem"
      ],
      "priority": 2
    },
    {
      "id": "component-footer",
      "file_path": "src/shared/components/Footer.tsx",
      "description": "Footer used across the app with copyright, links and subtle gradient background.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "Footer"
      ],
      "priority": 2
    },
    {
      "id": "component-glass-card",
      "file_path": "src/shared/components/GlassCard.tsx",
      "description": "Card variant using glassmorphism (backdrop-blur, translucent gradient) for elevated UI surfaces.",
      "dependencies": [
        "src/shared/components/Card.tsx",
        "src/theme/index.ts"
      ],
      "exports": [
        "GlassCard"
      ],
      "priority": 2
    },
    {
      "id": "component-gradient-badge",
      "file_path": "src/shared/components/GradientBadge.tsx",
      "description": "Small badge component with gradient background, suitable for status displays and tags.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "GradientBadge"
      ],
      "priority": 2
    },
    {
      "id": "component-header",
      "file_path": "src/shared/components/Header.tsx",
      "description": "Top header bar with global actions (search, notifications, profile). Integrates keyboard shortcuts and accessible menus.",
      "dependencies": [
        "src/shared/components/Avatar.tsx",
        "src/shared/components/Dropdown.tsx",
        "src/shared/components/Icon.tsx",
        "src/state/store.ts"
      ],
      "exports": [
        "Header"
      ],
      "priority": 2
    },
    {
      "id": "component-icon",
      "file_path": "src/shared/components/Icon.tsx",
      "description": "Lightweight icon component and icon registry. Provides common SVG icons and allows size/color props. Icon set exported from src/shared/icons/index.tsx.",
      "dependencies": [
        "src/shared/icons/index.tsx",
        "src/theme/index.ts"
      ],
      "exports": [
        "Icon",
        "IconProps"
      ],
      "priority": 2
    },
    {
      "id": "component-input",
      "file_path": "src/shared/components/Input.tsx",
      "description": "Controlled input with accessible label, optional icon, validation state, and skeleton variant. Integrates with react-hook-form friendly props.",
      "dependencies": [
        "src/shared/components/Icon.tsx",
        "src/theme/index.ts",
        "src/shared/components/Skeleton.tsx"
      ],
      "exports": [
        "Input",
        "InputProps"
      ],
      "priority": 2
    },
    {
      "id": "component-modal",
      "file_path": "src/shared/components/Modal.tsx",
      "description": "Accessible modal with portal support, backdrop blur, focus trap, aria attributes and animations. Integrates with ModalProvider for stacking.",
      "dependencies": [
        "src/theme/animations.ts",
        "src/core/events.ts"
      ],
      "exports": [
        "Modal",
        "ModalHeader",
        "ModalBody",
        "ModalFooter"
      ],
      "priority": 2
    },
    {
      "id": "component-sidebar",
      "file_path": "src/shared/components/Sidebar.tsx",
      "description": "Collapsible sidebar with navigation links, active route highlighting and keyboard navigation support. Integrates with MainLayout and useAppStore.",
      "dependencies": [
        "src/shared/components/Icon.tsx",
        "src/state/store.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "Sidebar"
      ],
      "priority": 2
    },
    {
      "id": "component-skeleton",
      "file_path": "src/shared/components/Skeleton.tsx",
      "description": "Skeleton loading component with shimmer effect used across lists and charts to indicate loading states.",
      "dependencies": [
        "src/theme/animations.ts"
      ],
      "exports": [
        "Skeleton"
      ],
      "priority": 2
    },
    {
      "id": "component-spinner",
      "file_path": "src/shared/components/Spinner.tsx",
      "description": "Small CSS/ SVG spinner component used for in-button and page loading states. Honors reduced-motion and theme colors.",
      "dependencies": [
        "src/theme/index.ts"
      ],
      "exports": [
        "Spinner"
      ],
      "priority": 2
    },
    {
      "id": "component-toast",
      "file_path": "src/shared/components/Toast.tsx",
      "description": "Toast visual component implementing enter/exit animations, types (success, error, info), and ARIA live region integration.",
      "dependencies": [
        "src/theme/animations.ts",
        "src/shared/components/Icon.tsx"
      ],
      "exports": [
        "Toast"
      ],
      "priority": 2
    },
    {
      "id": "component-tooltip",
      "file_path": "src/shared/components/Tooltip.tsx",
      "description": "Accessible tooltip using aria-describedby; supports delay, positioning and motion presets.",
      "dependencies": [
        "src/theme/animations.ts"
      ],
      "exports": [
        "Tooltip"
      ],
      "priority": 2
    },
    {
      "id": "hooks-useauth",
      "file_path": "src/hooks/useAuth.ts",
      "description": "Convenience hook that proxies AuthProvider context to give components currentUser, login, logout and isAuthenticated flags.",
      "dependencies": [
        "src/providers/AuthProvider.tsx",
        "src/core/contracts.ts"
      ],
      "exports": [
        "useAuth"
      ],
      "priority": 2
    },
    {
      "id": "hooks-usedebounce",
      "file_path": "src/hooks/useDebounce.ts",
      "description": "Generic debounce hook used by other hooks and components (search inputs, resize handlers).",
      "dependencies": [],
      "exports": [
        "useDebounce"
      ],
      "priority": 2
    },
    {
      "id": "hooks-usefetch",
      "file_path": "src/hooks/useFetch.ts",
      "description": "Thin wrapper over React Query's useQuery to enforce consistent fetcher signature and error handling in feature code.",
      "dependencies": [
        "src/services/api.ts",
        "src/core/utils.ts"
      ],
      "exports": [
        "useFetch",
        "useMutationHelper"
      ],
      "priority": 2
    },
    {
      "id": "hooks-uselocalstorage",
      "file_path": "src/hooks/useLocalStorage.ts",
      "description": "Small typed hook to persist state to localStorage with SSR-safety and optional serializer hooks.",
      "dependencies": [
        "src/core/utils.ts"
      ],
      "exports": [
        "useLocalStorage"
      ],
      "priority": 2
    },
    {
      "id": "hooks-usemodal",
      "file_path": "src/hooks/useModal.ts",
      "description": "Hook for opening and closing global modals via ModalProvider including typed return for promise-modals.",
      "dependencies": [
        "src/providers/ModalProvider.tsx",
        "src/core/events.ts"
      ],
      "exports": [
        "useModal"
      ],
      "priority": 2
    },
    {
      "id": "hooks-usetheme",
      "file_path": "src/hooks/useTheme.ts",
      "description": "Small hook to access theme tokens and helpers; proxies ThemeProvider context.",
      "dependencies": [
        "src/providers/ThemeProvider.tsx",
        "src/theme/index.ts"
      ],
      "exports": [
        "useThemeTokens"
      ],
      "priority": 2
    },
    {
      "id": "hooks-usetoast",
      "file_path": "src/hooks/useToast.ts",
      "description": "Hook that exposes toast controls (show, success, error) that internally use the ToastProvider or event bus if outside provider scope.",
      "dependencies": [
        "src/providers/ToastProvider.tsx",
        "src/core/events.ts"
      ],
      "exports": [
        "useToast"
      ],
      "priority": 2
    },
    {
      "id": "hooks-usewindowsize",
      "file_path": "src/hooks/useWindowSize.ts",
      "description": "Hook to report viewport width/height and breakpoint booleans. Debounced resize handling for performance.",
      "dependencies": [
        "src/hooks/useDebounce.ts"
      ],
      "exports": [
        "useWindowSize"
      ],
      "priority": 2
    },
    {
      "id": "shared-icons",
      "file_path": "src/shared/icons/index.tsx",
      "description": "Collection of small SVG icon components (Menu, Close, User, Check, Alert, Chart) used across the app.",
      "dependencies": [],
      "exports": [
        "MenuIcon",
        "CloseIcon",
        "UserIcon",
        "CheckIcon",
        "AlertIcon",
        "ChartIcon"
      ],
      "priority": 2
    },
    {
      "id": "shared-layout-auth",
      "file_path": "src/shared/layouts/AuthLayout.tsx",
      "description": "Layout used for auth-related routes (login, signup). Centers content, sets modest background gradient and applies appropriate padding and accessibility attributes.",
      "dependencies": [
        "src/theme/index.ts",
        "src/shared/components/Card.tsx"
      ],
      "exports": [
        "AuthLayout"
      ],
      "priority": 2
    },
    {
      "id": "shared-layout-main",
      "file_path": "src/shared/layouts/MainLayout.tsx",
      "description": "Primary application layout: header, collapsible sidebar, main content area and footer. Manages responsive breakpoints and keyboard accessibility for navigation.",
      "dependencies": [
        "src/shared/components/Header.tsx",
        "src/shared/components/Sidebar.tsx",
        "src/shared/components/Footer.tsx",
        "src/state/store.ts",
        "src/hooks/useWindowSize.ts"
      ],
      "exports": [
        "MainLayout"
      ],
      "priority": 2
    },
    {
      "id": "feature-activity-feed",
      "file_path": "src/features/dashboard/ActivityFeed.tsx",
      "description": "Activity feed component rendering a list of recent events with skeleton while loading. Accessible list with item actions (mark read).",
      "dependencies": [
        "src/shared/components/Skeleton.tsx",
        "src/shared/components/Avatar.tsx",
        "src/hooks/useFetch.ts",
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "ActivityFeed"
      ],
      "priority": 3
    },
    {
      "id": "feature-metric-card",
      "file_path": "src/features/dashboard/MetricCard.tsx",
      "description": "Reusable metric card for dashboard: value, delta, sparkline chart, and contextual tooltip. Uses GradientBadge for delta.",
      "dependencies": [
        "src/shared/components/Card.tsx",
        "src/shared/components/GradientBadge.tsx",
        "src/shared/components/Chart.tsx",
        "src/shared/components/Tooltip.tsx",
        "src/theme/index.ts"
      ],
      "exports": [
        "MetricCard"
      ],
      "priority": 3
    },
    {
      "id": "feature-profile-card",
      "file_path": "src/features/profile/ProfileCard.tsx",
      "description": "Small feature component showing user profile info, avatar, editable fields and a save button. Demonstrates integration with services/auth and modals for editing.",
      "dependencies": [
        "src/shared/components/Card.tsx",
        "src/shared/components/Avatar.tsx",
        "src/hooks/useAuth.ts",
        "src/providers/ModalProvider.tsx",
        "src/shared/components/Button.tsx"
      ],
      "exports": [
        "ProfileCard"
      ],
      "priority": 3
    },
    {
      "id": "page-dashboard",
      "file_path": "src/pages/DashboardPage.tsx",
      "description": "Authenticated dashboard page showing metrics, charts and activity feed. Uses React Query hooks to fetch metrics and displays loading skeletons.",
      "dependencies": [
        "src/features/dashboard/MetricCard.tsx",
        "src/features/dashboard/ActivityFeed.tsx",
        "src/shared/components/Chart.tsx",
        "src/shared/components/Skeleton.tsx",
        "src/hooks/useFetch.ts",
        "src/core/contracts.ts"
      ],
      "exports": [
        "DashboardPage"
      ],
      "priority": 3
    },
    {
      "id": "page-home",
      "file_path": "src/pages/HomePage.tsx",
      "description": "Public landing/home page. Demonstrates hero area, feature cards (GlassCard), and CTA to sign up / login. Includes micro-interactions and animations.",
      "dependencies": [
        "src/shared/components/GlassCard.tsx",
        "src/shared/components/Button.tsx",
        "src/theme/animations.ts"
      ],
      "exports": [
        "HomePage"
      ],
      "priority": 3
    },
    {
      "id": "page-login",
      "file_path": "src/pages/LoginPage.tsx",
      "description": "Login page with form using Input and Button components. Integrates with AuthProvider and shows proper error handling and focus management for accessibility.",
      "dependencies": [
        "src/shared/components/Input.tsx",
        "src/shared/components/Button.tsx",
        "src/providers/AuthProvider.tsx",
        "src/hooks/useAuth.ts",
        "src/theme/animations.ts"
      ],
      "exports": [
        "LoginPage"
      ],
      "priority": 3
    }
  ],
  "file_paths": [
    "src/app/config.ts",
    "src/App.tsx",
    "src/core/contracts.ts",
    "src/core/di.ts",
    "src/core/events.ts",
    "src/core/hooks.ts",
    "src/core/utils.ts",
    "src/main.tsx",
    "src/providers/AuthProvider.tsx",
    "src/providers/ModalProvider.tsx",
    "src/providers/QueryProvider.tsx",
    "src/providers/ThemeProvider.tsx",
    "src/providers/ToastProvider.tsx",
    "src/routes.tsx",
    "src/services/analytics.ts",
    "src/services/api.ts",
    "src/services/auth.ts",
    "src/state/store.ts",
    "src/styles/global.css",
    "src/theme/animations.ts",
    "src/theme/index.ts",
    "src/shared/components/Avatar.tsx",
    "src/shared/components/Button.tsx",
    "src/shared/components/Card.tsx",
    "src/shared/components/Chart.tsx",
    "src/shared/components/Dropdown.tsx",
    "src/shared/components/Footer.tsx",
    "src/shared/components/GlassCard.tsx",
    "src/shared/components/GradientBadge.tsx",
    "src/shared/components/Header.tsx",
    "src/shared/components/Icon.tsx",
    "src/shared/components/Input.tsx",
    "src/shared/components/Modal.tsx",
    "src/shared/components/Sidebar.tsx",
    "src/shared/components/Skeleton.tsx",
    "src/shared/components/Spinner.tsx",
    "src/shared/components/Toast.tsx",
    "src/shared/components/Tooltip.tsx",
    "src/hooks/useAuth.ts",
    "src/hooks/useDebounce.ts",
    "src/hooks/useFetch.ts",
    "src/hooks/useLocalStorage.ts",
    "src/hooks/useModal.ts",
    "src/hooks/useTheme.ts",
    "src/hooks/useToast.ts",
    "src/hooks/useWindowSize.ts",
    "src/shared/icons/index.tsx",
    "src/shared/layouts/AuthLayout.tsx",
    "src/shared/layouts/MainLayout.tsx",
    "src/features/dashboard/ActivityFeed.tsx",
    "src/features/dashboard/MetricCard.tsx",
    "src/features/profile/ProfileCard.tsx",
    "src/pages/DashboardPage.tsx",
    "src/pages/HomePage.tsx",
    "src/pages/LoginPage.tsx"
  ],
  "descriptions": [
    "Materialized runtime configuration using import.meta.env; exposes typed config values (API base URL, feature flags, analytics key).",
    "Root app component. Composes Router (routes.tsx) and top-level layout & error boundary. Provides global keyboard listeners for accessibility (e.g., ESC to close modals).",
    "Domain types, API request/response contracts and shared TypeScript interfaces used across the app (e.g., User, AuthTokens, ApiError, DashboardMetric). Central source of truth for types.",
    "Simple dependency-injection container for substituting services during tests or extensions (getService/setService patterns).",
    "Lightweight event bus for app-level events (toasts, analytics events, auth changes). Exposes subscribe/publish helpers and typed event names.",
    "Registry for optional extension hooks. Small helper for registering and retrieving lifecycle hooks for plugins/extensions.",
    "Common utilities used across app: fetch wrapper, classNames helper, date formatters, safe JSON parse, sleep, identity helpers.",
    "Application entry point. Bootstraps providers (QueryProvider, ThemeProvider, AuthProvider, ToastProvider, ModalProvider) and renders the root App into the DOM. Reads import.meta.env via app/config.",
    "Authentication context. Manages current user session, token refresh, and exposes useAuth hook. Persists tokens securely (localStorage with simple encryption helper in core/utils if needed).",
    "Global modal portal and manager that supports stacking, backdrop blur (glass morphism), focus trap, and ESC to close. Exposes openModal/closeModal via useModal hook.",
    "TanStack Query (React Query) provider wrapper: creates QueryClient, sets default options, and exposes devtools integration when enabled.",
    "Context-based ThemeProvider that injects CSS variables, provides a useTheme hook, persists dark/light mode in localStorage, and integrates with Framer Motion's reduced-motion preference.",
    "Global toast provider that renders toasts with enter/exit animations, stacking, auto-dismiss and programmatic API (useToast). Uses event bus to allow publishEvent('toast').",
    "React Router v6 route declarations. Maps routes to pages and applies layout wrappers and route-level meta (auth required).",
    "Analytics wrapper that sends events to external provider if enabled. Integrates with event bus to automatically capture route changes and key events.",
    "Central API client wrapper (fetch wrapper) that handles base URL, auth token injection, error parsing and retries. Small wrapper used by React Query fetchers.",
    "High-level auth service: login, logout, refresh, getCurrentUser. Uses apiClient for requests and exposes typed responses matching core/contracts.",
    "Zustand store used for non-server, non-persistent UI state (sidebar collapsed, mobile nav open, last active tab). Exposes typed hooks to read/update store.",
    "Global CSS reset, base typographic scale, CSS variables mapped from tokens (for non-JS components), base utility classes. Includes backdrop-filter for modal blur and glassmorphism helpers.",
    "Animation presets for Framer Motion and CSS transition utilities (e.g., subtle, pop, fade, stagger).",
    "Design tokens (colors, spacing, typography scale, radii, z-index), utility helpers to consume tokens in components, and a theme object shape for ThemeProvider.",
    "Avatar component with fallback initials and optional status indicator. Accessible and keyboard-targetable.",
    "Accessible Button component supporting variants (primary, ghost, outline), size props, loading state (shows spinner), and icon support. Uses theme tokens for consistent visuals.",
    "Base Card component with elevation, rounded corners and support for header/footer slots. Used by many features.",
    "Small wrapper around a charting library (Recharts/Chart.js). Provides consistent theming, skeleton state and responsive resizing.",
    "Dropdown menu with keyboard navigation, focus trap for nested menus, and animation utilties.",
    "Footer used across the app with copyright, links and subtle gradient background.",
    "Card variant using glassmorphism (backdrop-blur, translucent gradient) for elevated UI surfaces.",
    "Small badge component with gradient background, suitable for status displays and tags.",
    "Top header bar with global actions (search, notifications, profile). Integrates keyboard shortcuts and accessible menus.",
    "Lightweight icon component and icon registry. Provides common SVG icons and allows size/color props. Icon set exported from src/shared/icons/index.tsx.",
    "Controlled input with accessible label, optional icon, validation state, and skeleton variant. Integrates with react-hook-form friendly props.",
    "Accessible modal with portal support, backdrop blur, focus trap, aria attributes and animations. Integrates with ModalProvider for stacking.",
    "Collapsible sidebar with navigation links, active route highlighting and keyboard navigation support. Integrates with MainLayout and useAppStore.",
    "Skeleton loading component with shimmer effect used across lists and charts to indicate loading states.",
    "Small CSS/ SVG spinner component used for in-button and page loading states. Honors reduced-motion and theme colors.",
    "Toast visual component implementing enter/exit animations, types (success, error, info), and ARIA live region integration.",
    "Accessible tooltip using aria-describedby; supports delay, positioning and motion presets.",
    "Convenience hook that proxies AuthProvider context to give components currentUser, login, logout and isAuthenticated flags.",
    "Generic debounce hook used by other hooks and components (search inputs, resize handlers).",
    "Thin wrapper over React Query's useQuery to enforce consistent fetcher signature and error handling in feature code.",
    "Small typed hook to persist state to localStorage with SSR-safety and optional serializer hooks.",
    "Hook for opening and closing global modals via ModalProvider including typed return for promise-modals.",
    "Small hook to access theme tokens and helpers; proxies ThemeProvider context.",
    "Hook that exposes toast controls (show, success, error) that internally use the ToastProvider or event bus if outside provider scope.",
    "Hook to report viewport width/height and breakpoint booleans. Debounced resize handling for performance.",
    "Collection of small SVG icon components (Menu, Close, User, Check, Alert, Chart) used across the app.",
    "Layout used for auth-related routes (login, signup). Centers content, sets modest background gradient and applies appropriate padding and accessibility attributes.",
    "Primary application layout: header, collapsible sidebar, main content area and footer. Manages responsive breakpoints and keyboard accessibility for navigation.",
    "Activity feed component rendering a list of recent events with skeleton while loading. Accessible list with item actions (mark read).",
    "Reusable metric card for dashboard: value, delta, sparkline chart, and contextual tooltip. Uses GradientBadge for delta.",
    "Small feature component showing user profile info, avatar, editable fields and a save button. Demonstrates integration with services/auth and modals for editing.",
    "Authenticated dashboard page showing metrics, charts and activity feed. Uses React Query hooks to fetch metrics and displays loading skeletons.",
    "Public landing/home page. Demonstrates hero area, feature cards (GlassCard), and CTA to sign up / login. Includes micro-interactions and animations.",
    "Login page with form using Input and Button components. Integrates with AuthProvider and shows proper error handling and focus management for accessibility."
  ],
  "total_files": 55
}