import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { apiClient } from './api/client';
import { Account, ApiResult } from '@/core/contracts';

export const ACCOUNTS_QUERY_KEY = ['accounts'] as const;

/**
 * Service function to fetch all accounts
 */
export async function getAccounts(): Promise<Account[]> {
  const result = await apiClient.get<ApiResult<Account[]>>('/accounts');
  return result.data;
}

/**
 * Service function to fetch a specific account by ID
 */
export async function getAccount(accountId: string): Promise<Account> {
  const result = await apiClient.get<ApiResult<Account>>(`/accounts/${accountId}`);
  return result.data;
}

/**
 * Service function to update account details
 */
export async function updateAccount(accountId: string, updates: Partial<Account>): Promise<Account> {
  const result = await apiClient.put<ApiResult<Account>>(`/accounts/${accountId}`, updates);
  return result.data;
}

/**
 * React Query hook to fetch all accounts with caching
 */
export function useAccounts() {
  return useQuery({
    queryKey: ACCOUNTS_QUERY_KEY,
    queryFn: getAccounts,
    staleTime: 5 * 60 * 1000, // 5 minutes
    retry: 3,
    retryDelay: (attemptIndex) => Math.min(1000 * 2 ** attemptIndex, 30000),
  });
}

/**
 * React Query hook to fetch a specific account
 */
export function useAccount(accountId: string) {
  return useQuery({
    queryKey: [...ACCOUNTS_QUERY_KEY, accountId],
    queryFn: () => getAccount(accountId),
    enabled: !!accountId,
    staleTime: 5 * 60 * 1000, // 5 minutes
    retry: 3,
  });
}

/**
 * React Query mutation hook to update account details
 */
export function useUpdateAccount() {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: ({ accountId, updates }: { accountId: string; updates: Partial<Account> }) =>
      updateAccount(accountId, updates),
    onSuccess: (updatedAccount) => {
      // Update the specific account in cache
      queryClient.setQueryData([...ACCOUNTS_QUERY_KEY, updatedAccount.id], updatedAccount);
      
      // Update the account in the accounts list cache
      queryClient.setQueryData(ACCOUNTS_QUERY_KEY, (oldAccounts: Account[] | undefined) => {
        if (!oldAccounts) return [updatedAccount];
        return oldAccounts.map(account => 
          account.id === updatedAccount.id ? updatedAccount : account
        );
      });
    },
    onError: (error) => {
      console.error('Failed to update account:', error);
    },
  });
}

/**
 * Hook to get account balance summary
 */
export function useAccountsSummary() {
  const { data: accounts, ...rest } = useAccounts();

  const summary = accounts ? {
    totalBalance: accounts.reduce((sum, account) => sum + account.balance, 0),
    totalAvailable: accounts.reduce((sum, account) => sum + account.availableBalance, 0),
    totalPending: accounts.reduce((sum, account) => sum + (account.pendingBalance || 0), 0),
    accountCount: accounts.length,
    activeAccounts: accounts.filter(account => account.status === 'active').length,
  } : null;

  return {
    ...rest,
    data: accounts,
    summary,
  };
}

/*
Self-Check Comments:
- [x] Uses `@/` imports only
- [x] Uses providers/hooks (no direct DOM/localStorage side effects) 
- [x] Reads config from `@/app/config` - uses React Query configuration
- [x] Exports default named component - exports service functions and hooks
- [x] Adds basic ARIA and keyboard handlers (where relevant) - N/A for service layer
*/
